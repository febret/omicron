config:
{
	serverPort = "28000"; // Listening port for Omicron clients
	
	showEventStream = false;		// Show outgoing UDP events
	showEventMessages = false;	// Show outgoing TCP events
	showIncomingStream = false;		// Show incoming streaming events
	showIncomingMessages = true;	// Show incoming single events
	
	logClientConnectionsToFile = false;
	clientLogPath = "C:/Dev/logs/oinputserver-clientLog.txt";
	
	services:
	{

		// Touch screen
		PQService:
		{
			serverIP = "127.0.0.1";
				
			normalizeData = true;
			touchOffset = [0, 0];
				
			maxBlobSize = 1001;

			debug = false;
			debugRawPQInfo = false;
			showStreamSpeed = false;
				
			useGestureManager = false;
		};
		
		/*
		OpenVRService:
		{
		};
		*/

		// Xbox / PS3 controllers
		XInputService:
		{
			updateInterval = 0.05;
			checkControllerInterval = 2.0;
			debug = false;
		};
		/*
		// Kinect skeleton and speech recognition
		// Requires Microsoft Kinect SDK
		// Microsoft Speech Platform SDK 11 required for KinectSpeech
		MSKinectService:
		{
			updateInterval = 1.0;
			imageStreamInterval = 0.05;
			// serviceId = 0;
			
			debug = false;
			
			// Body Tracking
			enableKinectBody = true;
			seatedMode = false;
			kinectOriginOffset = [0, 0, 0];
			
			// Generates a head and wand mocap event similar to the CAVE2 tracker
			// Will not accurately track orientation or Z movement
			caveSimulator = false;
			
			// Speech recognition
			enableKinectSpeech = false;
			speechGrammerFilePath = "C:/Workspace/Kinect/Samples v2.0/SpeechBasics-D2D/SpeechBasics-D2D.grxml";
			confidenceThreshold = 0.3;
			
			// Beam audio angle and energy
			enableKinectAudio = false;
			beamConfidenceThreshold = 0.1;
			
			// Color stream
			enableKinectColor = false;
			
			// Depth stream
			enableKinectDepth = false;
			lowDetailMaxDistance = 3000; // millimeters
		};
		*/
		/*
		// Combine game controller with motion capture object
		WandService:
		{
			controllerService = "XInputService";
			controllerSourceId = 0;
			raySourceId = 0;
			debug = false;
			pointer:
			{
				type = "rectangular";
				topLeft = [4.1021, -2.4130, 2.4892];
				bottomLeft = [4.1021, -2.4130, 0.1778];
				bottomRight = [-4.1021, -2.4130, 0.1778];
				topRight = [-4.1021, -2.4130, 2.4892];
			};
		};
		
		WandService1:
		{
			class = "WandService";
			controllerService = "XInputService";
			controllerSourceId = 1;
			raySourceId = 1;
			debug = false;
			pointer:
			{
				type = "rectangular";
				topLeft = [4.1021, -2.4130, 2.4892];
				bottomLeft = [4.1021, -2.4130, 0.1778];
				bottomRight = [-4.1021, -2.4130, 0.1778];
				topRight = [-4.1021, -2.4130, 2.4892];
			};
		};
		
		// Motion capture system
		VRPNService:
		{
			updateInterval = 0.01;
			serverIP = "localhost"; // This is the IP of all trackable objects below, unless marked otherwise
			debug = false;
			objects:
			{
				Controller_1:
				{
					name = "Controller_1";
					objectID = 0;
					userId = 0;
				};

				Controller_2:
				{
					name = "Controller_2";
					objectID = 1;
					userId = 1;
				};			
			};
		};
		*/
		/*
		// This should be listed last so previous services can generate events before this
		// one can send data out (if enabled) before oinputserver locally processes events
		NetService:
		{
			serverIP: "localhost"; // Note: Do not use DNS names here
			msgPort = 28000;
			dataPort = 7801;
			debug = false;
			
			// Stream data to serverIP on dataPort instead of receiving (Default: false)
			dataStreamOut = false;
			
			// Delay in ms between connection attempts to serverIP (Default: 5000)
			reconnectDelay = 5000;
		};
		*/
	};
};
